name: E-Banking CI

# Run the CI pipeline on pushes and pull requests to the main branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository so that the workflow has access to the code.
      - uses: actions/checkout@v4

      # Set up Temurin JDK 21 and enable Maven caching.  This speeds up
      # subsequent builds by reusing dependencies from the GitHub Actions cache.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Pre-download the AspectJ weaver used as a javaagent.  Without this
      # dependency present, setting the agent will cause the JVM to abort.  This
      # resolves the JAR into the local Maven repository before running tests.
      - name: Resolve AspectJ dependency
        run: mvn -B -q dependency:get -Dartifact=org.aspectj:aspectjweaver:1.9.22

      # After resolving dependencies, set the JAVA_TOOL_OPTIONS environment
      # variable so that the Maven Surefire plugin can locate the AspectJ
      # javaagent.  This command appends to $GITHUB_ENV, making the variable
      # available to subsequent steps.
      - name: Configure AspectJ agent
        run: echo "JAVA_TOOL_OPTIONS=-javaagent:$HOME/.m2/repository/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar" >> $GITHUB_ENV

      # Install Google Chrome and Xvfb.  Selenium tests require a real
      # browser.  Xvfb provides a virtual display so that Chrome can run in
      # environments without a GUI.  The DISPLAY environment variable is
      # exported for subsequent steps.
      - name: Install Chrome and Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable xvfb
          # Start a virtual display in the background
          Xvfb :99 -screen 0 1920x1080x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # Build the project and run the unit/integration tests.  The '-B'
      # (batch mode) flag suppresses Maven's interactive progress output.
      - name: Build and test with Maven
        run: mvn -B clean test
